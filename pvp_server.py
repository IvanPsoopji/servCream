#pvp_server
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import threading
import time
import random
import logging
from collections import deque

app = Flask(__name__)
CORS(app)

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ deque –¥–ª—è —à–≤–∏–¥—à–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ —á–µ—Ä–≥–æ—é
# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
matchmaking_queue = deque()
active_battles = {}
queue_lock = threading.Lock()
battle_lock = threading.Lock()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def matchmaking_worker():
    """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø–æ—à—É–∫—É –º–∞—Ç—á—ñ–≤"""
    while True:
        try:
            with queue_lock:
                if len(matchmaking_queue) >= 2:
                    player1 = matchmaking_queue.popleft()
                    player2 = matchmaking_queue.popleft()

                    battle_id = f"battle_{int(time.time())}_{random.randint(1000, 9999)}"

                    with battle_lock:
                        active_battles[battle_id] = {
                            "player1": player1,
                            "player2": player2,
                            "status": "waiting",
                            "created_at": time.time()
                        }

                    logger.info(f"Created battle {battle_id}: "
                                f"{player1['username']} vs {player2['username']}")

        except Exception as e:
            logger.error(f"Matchmaking error: {e}")
        finally:
            time.sleep(0.5)


@app.route('/join_queue', methods=['POST'])
def join_queue():
    try:
        player = request.json
        with queue_lock:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
            if any(p['user_id'] == player['user_id'] for p in matchmaking_queue):
                return jsonify({"status": "already_in_queue"})

            matchmaking_queue.append(player)
            logger.info(f"Player {player['username']} added to queue. Size: {len(matchmaking_queue)}")

            return jsonify({
                "status": "searching",
                "queue_size": len(matchmaking_queue)
            })

    except Exception as e:
        logger.error(f"Join queue error: {e}")
        return jsonify({"error": str(e)}), 500


@app.route('/check_battle', methods=['POST'])
def check_battle():
    try:
        user_id = request.json.get('user_id')
        with battle_lock:
            # –ü–æ—à—É–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—é –¥–ª—è –≥—Ä–∞–≤—Ü—è
            for battle_id, battle in active_battles.items():
                if battle['status'] == 'waiting':
                    if user_id in [battle['player1']['user_id'], battle['player2']['user_id']]:
                        opponent = (battle['player2'] if user_id == battle['player1']['user_id']
                                    else battle['player1'])
                        return jsonify({
                            "status": "found",
                            "battle_id": battle_id,
                            "opponent": opponent
                        })

        return jsonify({
            "status": "searching",
            "queue_size": len(matchmaking_queue)
        })

    except Exception as e:
        logger.error(f"Check battle error: {e}")
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–æ—Ä–∫–µ—Ä —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    threading.Thread(target=matchmaking_worker, daemon=True).start()

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Flask
    app.run(
        host='0.0.0.0',
        port=5000,
        threaded=True,
        use_reloader=False  # –í–∏–º–∫–Ω—É—Ç–∏ reloader –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –ø–æ—Ç–æ–∫—ñ–≤
    )

@app.route("/cancel_queue", methods=["POST"])
def cancel_queue():
    try:
        user_id = request.json.get("user_id")

        with queue_lock:
            global matchmaking_queue
            matchmaking_queue = [p for p in matchmaking_queue if p["user_id"] != user_id]

        return jsonify({"status": "cancelled"})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/battle/<battle_id>")
def battle_page(battle_id):
    user_id = request.args.get("user_id")

    if battle_id not in active_battles:
        return "–ë—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 404

    battle = active_battles[battle_id]

    if user_id not in [battle["player1"]["user_id"], battle["player2"]["user_id"]]:
        return "–í–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –±–æ—é", 403

    # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –≥—Ä–∞–≤–µ—Ü—å –∑–∞–π—à–æ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –±–æ—é
    if "players_ready" not in battle:
        battle["players_ready"] = []

    if user_id not in battle["players_ready"]:
        battle["players_ready"].append(user_id)

    # –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ –≥–æ—Ç–æ–≤—ñ - –ø–æ—á–∏–Ω–∞—î–º–æ –±—ñ–π
    if len(battle.get("players_ready", [])) == 2:
        battle["status"] = "started"

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —Ö—Ç–æ —î —Å—É–ø–µ—Ä–Ω–∏–∫–æ–º
    opponent = battle["player2"] if user_id == battle["player1"]["user_id"] else battle["player1"]

    return render_template("pvp_battle.html",
                           battle_id=battle_id,
                           user_id=user_id,
                           opponent=opponent)

if __name__ == "__main__":
    print("üõ†Ô∏è –ó–∞–ø—É—Å–∫ PvP —Å–µ—Ä–≤–µ—Ä–∞...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫ –¥–ª—è –ø–æ—à—É–∫—É –º–∞—Ç—á—ñ–≤ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—É –Ω–∞–∑–≤—É —Ñ—É–Ω–∫—Ü—ñ—ó)
    threading.Thread(target=matchmaking_worker, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host="0.0.0.0", port=5000, threaded=True)