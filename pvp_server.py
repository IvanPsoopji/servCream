from flask import Flask, request, jsonify
from flask_cors import CORS
import threading
import time
import random
from database import db

app = Flask(__name__)
CORS(app)  # –î–æ–∑–≤–æ–ª—è—î–º–æ –∫—Ä–æ—Å-–¥–æ–º–µ–Ω–Ω—ñ –∑–∞–ø–∏—Ç–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —á–µ—Ä–≥–∏ —Ç–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –±–æ—ó–≤
matchmaking_queue = []
active_battles = {}
queue_lock = threading.Lock()  # –î–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–ø–µ—á–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ —á–µ—Ä–≥–æ—é


def run_matchmaking():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤"""
    while True:
        try:
            with queue_lock:
                # –Ø–∫—â–æ –≤ —á–µ—Ä–∑—ñ —î —è–∫ –º—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ
                if len(matchmaking_queue) >= 2:
                    player1 = matchmaking_queue.pop(0)
                    player2 = matchmaking_queue.pop(0)

                    battle_id = f"battle_{int(time.time())}_{random.randint(1000, 9999)}"

                    active_battles[battle_id] = {
                        "player1": player1,
                        "player2": player2,
                        "start_time": time.time(),
                        "status": "waiting"
                    }

                    print(f"‚öîÔ∏è –ü–æ—á–∞—Ç–æ–∫ –±–æ—é {battle_id}: {player1['username']} vs {player2['username']}")

        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —É matchmaking: {e}")

        time.sleep(1)


@app.route("/join_queue", methods=["POST"])
def join_queue():
    try:
        player_data = request.json

        with queue_lock:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ –≤ —á–µ—Ä–∑—ñ
            if any(p["user_id"] == player_data["user_id"] for p in matchmaking_queue):
                return jsonify({
                    "status": "already_in_queue",
                    "queue_size": len(matchmaking_queue)
                })

            matchmaking_queue.append(player_data)

            print(f"‚ûï –ì—Ä–∞–≤–µ—Ü—å {player_data['username']} –¥–æ–¥–∞–Ω–∏–π –≤ —á–µ—Ä–≥—É. –û—á—ñ–∫—É—é—Ç—å: {len(matchmaking_queue)}")

            return jsonify({
                "status": "searching",
                "queue_size": len(matchmaking_queue)
            })

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/check_battle", methods=["POST"])
def check_battle():
    try:
        user_id = request.json.get("user_id")

        for battle_id, battle in active_battles.items():
            if battle["status"] == "waiting":
                if user_id == battle["player1"]["user_id"]:
                    return jsonify({
                        "status": "found",
                        "battle_id": battle_id,
                        "opponent": battle["player2"]
                    })
                elif user_id == battle["player2"]["user_id"]:
                    return jsonify({
                        "status": "found",
                        "battle_id": battle_id,
                        "opponent": battle["player1"]
                    })

        return jsonify({"status": "searching"})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/cancel_queue", methods=["POST"])
def cancel_queue():
    try:
        user_id = request.json.get("user_id")

        with queue_lock:
            global matchmaking_queue
            matchmaking_queue = [p for p in matchmaking_queue if p["user_id"] != user_id]

        return jsonify({"status": "cancelled"})

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route("/battle/<battle_id>")
def battle_page(battle_id):
    user_id = request.args.get("user_id")

    if battle_id not in active_battles:
        return "–ë—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", 404

    battle = active_battles[battle_id]

    if user_id not in [battle["player1"]["user_id"], battle["player2"]["user_id"]]:
        return "–í–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ –±–æ—é", 403

    # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ –≥—Ä–∞–≤–µ—Ü—å –∑–∞–π—à–æ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –±–æ—é
    if "players_ready" not in battle:
        battle["players_ready"] = []

    if user_id not in battle["players_ready"]:
        battle["players_ready"].append(user_id)

    # –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ –≥–æ—Ç–æ–≤—ñ - –ø–æ—á–∏–Ω–∞—î–º–æ –±—ñ–π
    if len(battle.get("players_ready", [])) == 2:
        battle["status"] = "started"

    return "–ë–æ–π–æ–≤–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"  # –¢—É—Ç –±—É–¥–µ –≤–∞—à HTML/JS –¥–ª—è –±–æ—é


if __name__ == "__main__":
    print("üõ†Ô∏è –ó–∞–ø—É—Å–∫ PvP —Å–µ—Ä–≤–µ—Ä–∞...")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç—ñ–∫ –¥–ª—è –ø–æ—à—É–∫—É –º–∞—Ç—á—ñ–≤
    threading.Thread(target=run_matchmaking, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host="0.0.0.0", port=5000, threaded=True)